{
  "version": 3,
  "sources": ["../extension.js"],
  "sourcesContent": ["const vscode = require('vscode');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nconst CONFIG_FILE_NAME = 'update-versions.json';\r\n\r\n// function getExtensionDataPath() {\r\n//   const extensionId = 'YourPublisherName.update-versions'; // Update with your extension's publisher and name\r\n//   const extension = vscode.extensions.getExtension(extensionId);\r\n//   if (extension) {\r\n//     return extension.extensionDataPath;\r\n//   }\r\n//   throw new Error(`Extension with ID '${extensionId}' is not installed.`);\r\n// }\r\n\r\nasync function updateVersions() {\r\n  // Get the root path of the currently opened folder in VS Code\r\n  const rootPath = vscode.workspace.rootPath;\r\n\r\n  //extension data path\r\n  // const extensionDataPath = getExtensionDataPath();\r\n  // const configFilePath = path.join(extensionDataPath, CONFIG_FILE_NAME);\r\n\r\n  // Check if a folder is open in VS Code\r\n  if (rootPath) {\r\n    // Define the paths to your build.gradle and gradle-wrapper.properties files\r\n    const buildGradlePath = path.join(rootPath, 'android', 'build.gradle');\r\n    const gradleWrapperPropertiesPath = path.join(rootPath, 'android', 'gradle', 'wrapper', 'gradle-wrapper.properties');\r\n\r\n    let config = {};\r\n    if (fs.existsSync(configFilePath)) {\r\n      const configFileContent = fs.readFileSync(configFilePath, 'utf8');\r\n      config = JSON.parse(configFileContent);\r\n    }\r\n\r\n    // Get the desired versions from user input or use the saved versions\r\n    const desiredKotlinVersion = config.desiredKotlinVersion || await vscode.window.showInputBox({ prompt: 'Enter desired Kotlin version' });\r\n    const desiredGradleVersion = config.desiredGradleVersion || await vscode.window.showInputBox({ prompt: 'Enter desired Gradle version' });\r\n    const desiredGradleDistributionUrl = config.desiredGradleDistributionUrl || await vscode.window.showInputBox({ prompt: 'Enter desired Gradle distribution URL' });\r\n\r\n    // Update the values in the build.gradle file\r\n    if (fs.existsSync(buildGradlePath)) {\r\n      const buildGradleContent = fs.readFileSync(buildGradlePath, 'utf8');\r\n      const updatedBuildGradleContent = buildGradleContent\r\n        .replace(/ext\\.kotlin_version = .+/, `ext.kotlin_version = \"${desiredKotlinVersion}\"`)\r\n        .replace(/classpath 'com.android.tools.build:gradle:.+/, `classpath 'com.android.tools.build:gradle:${desiredGradleVersion}'`);\r\n      fs.writeFileSync(buildGradlePath, updatedBuildGradleContent);\r\n    }\r\n\r\n    // Update the values in the gradle-wrapper.properties file\r\n    if (fs.existsSync(gradleWrapperPropertiesPath)) {\r\n      const gradleWrapperContent = fs.readFileSync(gradleWrapperPropertiesPath, 'utf8');\r\n      const updatedGradleWrapperContent = gradleWrapperContent.replace(/distributionUrl=.+/, `distributionUrl=${desiredGradleDistributionUrl}`);\r\n      fs.writeFileSync(gradleWrapperPropertiesPath, updatedGradleWrapperContent);\r\n    }\r\n\r\n    // Save the desired versions in the configuration file\r\n    const updatedConfig = {\r\n      desiredKotlinVersion,\r\n      desiredGradleVersion,\r\n      desiredGradleDistributionUrl,\r\n    };\r\n    fs.writeFileSync(configFilePath, JSON.stringify(updatedConfig, null, 2));\r\n\r\n    vscode.window.showInformationMessage('Version update completed.');\r\n  } else {\r\n    vscode.window.showErrorMessage('No folder is opened in VS Code.');\r\n  }\r\n}\r\n\r\nfunction activate(context) {\r\n  let disposable = vscode.commands.registerCommand('extension.updateVersions', updateVersions);\r\n\r\n  context.subscriptions.push(disposable);\r\n}\r\nexports.activate = activate;\r\n\r\nfunction deactivate() { }\r\nexports.deactivate = deactivate;\r\n"],
  "mappings": ";AAAA,IAAM,SAAS,QAAQ,QAAQ;AAC/B,IAAM,KAAK,QAAQ,IAAI;AACvB,IAAM,OAAO,QAAQ,MAAM;AAa3B,eAAe,iBAAiB;AAE9B,QAAM,WAAW,OAAO,UAAU;AAOlC,MAAI,UAAU;AAEZ,UAAM,kBAAkB,KAAK,KAAK,UAAU,WAAW,cAAc;AACrE,UAAM,8BAA8B,KAAK,KAAK,UAAU,WAAW,UAAU,WAAW,2BAA2B;AAEnH,QAAI,SAAS,CAAC;AACd,QAAI,GAAG,WAAW,cAAc,GAAG;AACjC,YAAM,oBAAoB,GAAG,aAAa,gBAAgB,MAAM;AAChE,eAAS,KAAK,MAAM,iBAAiB;AAAA,IACvC;AAGA,UAAM,uBAAuB,OAAO,wBAAwB,MAAM,OAAO,OAAO,aAAa,EAAE,QAAQ,+BAA+B,CAAC;AACvI,UAAM,uBAAuB,OAAO,wBAAwB,MAAM,OAAO,OAAO,aAAa,EAAE,QAAQ,+BAA+B,CAAC;AACvI,UAAM,+BAA+B,OAAO,gCAAgC,MAAM,OAAO,OAAO,aAAa,EAAE,QAAQ,wCAAwC,CAAC;AAGhK,QAAI,GAAG,WAAW,eAAe,GAAG;AAClC,YAAM,qBAAqB,GAAG,aAAa,iBAAiB,MAAM;AAClE,YAAM,4BAA4B,mBAC/B,QAAQ,4BAA4B,yBAAyB,uBAAuB,EACpF,QAAQ,gDAAgD,6CAA6C,uBAAuB;AAC/H,SAAG,cAAc,iBAAiB,yBAAyB;AAAA,IAC7D;AAGA,QAAI,GAAG,WAAW,2BAA2B,GAAG;AAC9C,YAAM,uBAAuB,GAAG,aAAa,6BAA6B,MAAM;AAChF,YAAM,8BAA8B,qBAAqB,QAAQ,sBAAsB,mBAAmB,8BAA8B;AACxI,SAAG,cAAc,6BAA6B,2BAA2B;AAAA,IAC3E;AAGA,UAAM,gBAAgB;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,OAAG,cAAc,gBAAgB,KAAK,UAAU,eAAe,MAAM,CAAC,CAAC;AAEvE,WAAO,OAAO,uBAAuB,2BAA2B;AAAA,EAClE,OAAO;AACL,WAAO,OAAO,iBAAiB,iCAAiC;AAAA,EAClE;AACF;AAEA,SAAS,SAAS,SAAS;AACzB,MAAI,aAAa,OAAO,SAAS,gBAAgB,4BAA4B,cAAc;AAE3F,UAAQ,cAAc,KAAK,UAAU;AACvC;AACA,QAAQ,WAAW;AAEnB,SAAS,aAAa;AAAE;AACxB,QAAQ,aAAa;",
  "names": []
}
